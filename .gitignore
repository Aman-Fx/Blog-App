# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

# production
/build

# misc
.DS_Store
.env.local
.env.development.local
.env.test.local
.env.production.local

npm-debug.log*
yarn-debug.log*
yarn-error.log*


# sign up component for future refrence with using yup

// import React, { useState } from 'react'
// import Axios from 'axios'
import { useForm } from 'react-hook-form'
import { yupResolver } from "@hookform/resolvers/yup"
import * as yup from 'yup'
import { useNavigate } from 'react-router-dom'

//Creating Schema to difine validations
const Schema = yup
  .object()
  .shape({
    fullname: yup.string().required(),
    Email: yup.string().email().required(),
    SetPassword: yup.string().min(4).max(8).required(),
    ConfirmPassword: yup.string().oneOf([yup.ref('SetPassword'), null])

  })

export const Signin = () => {

  //New version of usehistory hook to navigate to the aLogin page
  const history = useNavigate();

  //For Local Storage purpose
  // const [signinData, setSigninData] = useState([]);

  const { register, handleSubmit, formState: { errors }, reset } = useForm({
    resolver: yupResolver(Schema)
  })

  const submitForm = (data) => {
    console.log({ data });
    reset();

    // localStorage
    // [...signinData, data]
    localStorage.setItem('SigninCredentials', JSON.stringify([data]));


    //Go to the Login page after a successfull signup
    history('/Login')

    // Axios.post("http://localhost:3333/Signin", data)
    //   .then((Response) => {
    //     console.log(Response);
    //   })
    //   .catch(error => {
    //     console.log(error);
    //   })

  }


  return (
    <div className='formwrap'>
      <form name='SigninForm' id='Signin-id' onSubmit={handleSubmit(submitForm)} >
        <h2>Register</h2>
        <div>
          <label htmlFor="name">Full Name :</label>
          <input type="text" name='fullname' placeholder='Aman Soni' autoComplete='off' {...register("fullname")} />


        </div>
        <p>{errors.fullname?.message}</p>

        <div>
          <label htmlFor="email">Username :</label>
          <input type="email" name='Email' placeholder='abc@gmail.com' autoComplete='off' {...register("Email")} />
        </div>

        <p>{errors.Email?.message}</p>

        <div>
          <label htmlFor="password">Set Password :</label>
          <input type="password" name='SetPassword' {...register("SetPassword")} />
        </div>

        <p>{errors.SetPassword?.message}</p>

        <div>
          <label htmlFor="Confirm password">Confirm password :</label>
          <input type="password" name='ConfirmPassword' {...register("ConfirmPassword")} />
        </div>

        <p>{errors.ConfirmPassword && "Passwords should match!"}</p>

        <button>Sign-up</button>
      </form>
    </div>
  )
}


# Login component using lo

import React from 'react'
import { Link, useNavigate } from 'react-router-dom'
import './Login.css'
import { useForm } from 'react-hook-form'
import { yupResolver } from "@hookform/resolvers/yup"
import * as yup from 'yup'

//Creating Schema to difine validations
const Schema = yup
    .object()
    .shape({
        Email: yup.string().email().required(),
        SetPassword: yup.string().min(4).max(8).required(),
    })

export const Login = () => {

    //New version of usehistory hook to navigate to the add content page
    const history = useNavigate();

    //Yup methods-->
    const { register, handleSubmit, formState: { errors }, reset } = useForm({
        resolver: yupResolver(Schema)
    })

    const submitForm = (data) => {
        console.log(data);
        reset();

        // to match the credentials
        const getusercred = localStorage.getItem("SigninCredentials");
        // console.log(getusercred);

        if (getusercred && getusercred.length) {
            const userdata = JSON.parse(getusercred);
            const userlogin = userdata.filter((element, key) =>
                element.Email === data.Email && element.SetPassword === data.SetPassword
            );
            // console.log(userlogin);

            if (userlogin.length === 0) {
                alert('Invalid Credentials');
            }
            else {
                console.log("Login Succesfull");

                //Set this details to the localstorage
                localStorage.setItem('UserLogin', JSON.stringify(userlogin))

                //Visting to the Add content page
                history('/AddBlog');

            }
        }
    }

    return (
        <div className='loginpage'>
            <div className='formwrap'>

                <form name='loginForm' id='login-id' onSubmit={handleSubmit(submitForm)} >
                    <h2>Login</h2>

                    <div>
                        <label htmlFor="email">Email :</label>
                        <input type="email" name='Email' placeholder='abc@gmail.com' {...register("Email")} />
                    </div>

                    <p>{errors.Email?.message}</p>

                    <div>
                        <label htmlFor="password">Password :</label>
                        <input type="password" name='SetPassword'  {...register("SetPassword")} />
                    </div>

                    <p>{errors.SetPassword?.message}</p>

                    <button >Sign-in</button>
                </form>
            </div>
            <h4 className='Link'>
                <Link to={'/Signin'} >Add a new account</Link></h4>
        </div>
    )
}


# UserLogout
 const userLogout = () => {
    //UserLogin is a unique key which is declared in login page while uploading the data to the localstorage
    localStorage.removeItem('UserLogin');
    history("/")
  }